--- a/extensions/libxt_NAT.c
+++ b/extensions/libxt_NAT.c
@@ -39,6 +39,7 @@
 	O_TO_SRC,
 	O_TO_PORTS,
 	O_RANDOM,
+	O_MODE,
 	O_RANDOM_FULLY,
 	O_PERSISTENT,
 };
@@ -61,7 +62,9 @@
 " --random\n"
 "				Randomize source port.\n"
 " --random-fully\n"
-"				Fully randomize source port.\n");
+"				Fully randomize source port.\n"
+" --mode <fullcone|symmetric>\n"
+"				NAT mode.\n");
 }
 
 static void DNAT_help(void)
@@ -104,6 +107,7 @@
 	{.name = "to-ports", .id = O_TO_PORTS, .type = XTTYPE_STRING},
 	{.name = "random", .id = O_RANDOM, .type = XTTYPE_NONE},
 	{.name = "random-fully", .id = O_RANDOM_FULLY, .type = XTTYPE_NONE},
+	{.name = "mode", .id = O_MODE, .type = XTTYPE_STRING},
 	XTOPT_TABLEEND,
 };
 
@@ -262,6 +266,7 @@
 		      proto == IPPROTO_DCCP ||
 		      proto == IPPROTO_ICMP;
 
+	mr->range[0].min_ip = 0;
 	xtables_option_parse(cb);
 	switch (cb->entry->id) {
 	case O_TO_DEST:
@@ -279,6 +284,15 @@
 		break;
 	case O_RANDOM_FULLY:
 		range->flags |= NF_NAT_RANGE_PROTO_RANDOM_FULLY;
+		break;
+	case O_MODE:
+		if (strcasecmp(cb->arg, "fullcone") == 0)
+			mr->range[0].min_ip = 1;
+		else if (strcasecmp(cb->arg, "symmetric") == 0)
+			mr->range[0].min_ip = 0;
+		else
+			xtables_error(PARAMETER_PROBLEM,
+				   "Unknown mode %s", cb->arg);
 		break;
 	}
 }
@@ -409,6 +423,8 @@
 		printf(" %srandom", flag_pfx);
 	if (r->flags & NF_NAT_RANGE_PROTO_RANDOM_FULLY)
 		printf(" %srandom-fully", flag_pfx);
+	if (r->min_ip == 1)
+		printf(" %smode: fullcone", flag_pfx);
 	if (r->flags & NF_NAT_RANGE_PERSISTENT)
 		printf(" %spersistent", flag_pfx);
 }
